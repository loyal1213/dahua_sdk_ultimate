cmake_minimum_required(VERSION 3.25 FATAL_ERROR)# cmake 最低版本需求
project(dahua_sdk_ultimate LANGUAGES C CXX)# 工程名称

# 检测到的操作系统信息打印消息
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    message(STATUS "Configuring on/for Linux")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    message(STATUS "Configuring on/for macOS")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    message(STATUS "Configuring on/for Windows")
elseif (CMAKE_SYSTEM_NAME STREQUAL "AIX")
    message(STATUS "Configuring on/for IBM AIX")
else ()
    message(STATUS "Configuring on/for ${CMAKE_SYSTEM_NAME}")
endif ()

# CPU是32位还是64
if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    message(STATUS "Target is 64 bits")
else ()
    message(STATUS "Target is 32 bits")
endif ()

# 预处理器了解主机处理器架构，同时在配置过程中打印状态消息
if (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i386")
    message(STATUS "i386 architecture detected")
elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "i686")
    message(STATUS "i686 architecture detected")
elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
    message(STATUS "x86_64 architecture detected")
else ()
    message(STATUS "host processor architecture is unknown")
endif ()


message(STATUS "Is the C++ compiler loaded? ${CMAKE_CXX_COMPILER_LOADED}")
if (CMAKE_CXX_COMPILER_LOADED)
    message(STATUS "The C++ compiler ID is: ${CMAKE_CXX_COMPILER_ID}")
    message(STATUS "Is the C++ from GNU? ${CMAKE_COMPILER_IS_GNUCXX}")
    message(STATUS "The C++ compiler version is: ${CMAKE_CXX_COMPILER_VERSION}")
endif ()

message(STATUS "Is the C compiler loaded? ${CMAKE_C_COMPILER_LOADED}")
if (CMAKE_C_COMPILER_LOADED)
    message(STATUS "The C compiler ID is: ${CMAKE_C_COMPILER_ID}")
    message(STATUS "Is the C from GNU? ${CMAKE_COMPILER_IS_GNUCC}")
    message(STATUS "The C compiler version is: ${CMAKE_C_COMPILER_VERSION}")
endif ()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)

# 依赖库
set(protobuf_MODULE_COMPATIBLE TRUE)
find_package(Protobuf CONFIG REQUIRED)
find_package(gRPC CONFIG REQUIRED)
find_package(Threads REQUIRED)
find_package(glog REQUIRED)

message(STATUS "PROJECT_BINARY_DIR: " ${PROJECT_BINARY_DIR})
message(STATUS "Protobuf_INCLUDE_DIRS ——— onnxCMakeLists:" ${PROTOBUF_INCLUDE_DIR})
message(STATUS "PROTOBUF_LIBRARIES ——— onnxCMakeLists:" ${PROTOBUF_LIBRARIES})
message(STATUS "#### current cmake version: ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION}")
message("______________________________________________________")


message(STATUS "Using protobuf ${protobuf_VERSION}")
message(STATUS "Using gRPC ${gRPC_VERSION}")
message(STATUS "Using cmake ${CMAKE_VERSION}")
message(STATUS "build_type: ${CMAKE_BUILD_TYPE}")

message(STATUS "C flags, Debug configuration: ${CMAKE_C_FLAGS_DEBUG}")
message(STATUS "C flags, Release configuration: ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "C flags, Release configuration with Debug info: ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
message(STATUS "C flags, minimal Release configuration: ${CMAKE_C_FLAGS_MINSIZEREL}")
message(STATUS "C++ flags, Debug configuration: ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "C++ flags, Release configuration: ${CMAKE_CXX_FLAGS_RELEASE}")
message(STATUS "C++ flags, Release configuration with Debug info: ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
message(STATUS "C++ flags, minimal Release configuration: ${CMAKE_CXX_FLAGS_MINSIZEREL}")


if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wextra  -pthread")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-attributes") #TODO: remove
    #set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -ggdb -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls")
    #set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fPIC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -ggdb")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -O3 -pthread")
endif ()

# 搜索 src 目录下的源文件
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/internal/engine DIR_ENGINE_SRCS) # 查找当前目录下的所有源文件 | 并将名称保存到 DIR_SRCS 变量
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/internal/socket DIR_SOCKET_SRCS)
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/internal/task DIR_TASK_SRCS)
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/internal/thread DIR_THREAD_SRCS)
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/internal/utility DIR_utility_SRCS)
#aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/cmd/dahua_sdk_ultimate DIR_MAIN_SRCS)

include_directories(
       # ${CMAKE_CURRENT_SOURCE_DIR}/cmd/dahua_sdk_ultimate
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zl_tool_kit/include
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/general_net_sdk/include
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/yaml-cpp/include
       # ${CMAKE_CURRENT_SOURCE_DIR}/internal
)

link_directories(
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/zl_tool_kit/lib
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/general_net_sdk/lib
        ${CMAKE_CURRENT_SOURCE_DIR}/third_party/yaml-cpp/lib
)


#file(GLOB SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/cmd/dahua_sdk_ultimate/*.cpp)

set(DAHUA_LIBS #sqlite3
        gRPC::grpc++_reflection gRPC::grpc++ protobuf::libprotobuf pthread
        ZLToolKit yaml-cpp
        avnetsdk dhconfigsdk dhnetsdk StreamConvertor
)

add_executable(dahua_sdk_ultimate ${CMAKE_CURRENT_SOURCE_DIR}/cmd/dahua_sdk_ultimate/main.cpp
        #${DIR_ENGINE_SRCS} ${DIR_SOCKET_SRCS} ${DIR_TASK_SRCS} ${DIR_THREAD_SRCS} ${DIR_utility_SRCS}
        )

target_link_libraries(dahua_sdk_ultimate ${DAHUA_LIBS})
