// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: conf.proto
// Protobuf C++ Version: 5.26.1

#include "conf.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kratos {
namespace api {

inline constexpr Data_Database::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : driver_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Data_Database::Data_Database(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Data_DatabaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Data_DatabaseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Data_DatabaseDefaultTypeInternal() {}
  union {
    Data_Database _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Data_DatabaseDefaultTypeInternal _Data_Database_default_instance_;

inline constexpr Server_HTTP::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        network_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        addr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timeout_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Server_HTTP::Server_HTTP(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Server_HTTPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Server_HTTPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Server_HTTPDefaultTypeInternal() {}
  union {
    Server_HTTP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Server_HTTPDefaultTypeInternal _Server_HTTP_default_instance_;

inline constexpr Server_GRPC::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        network_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        addr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timeout_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Server_GRPC::Server_GRPC(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Server_GRPCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Server_GRPCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Server_GRPCDefaultTypeInternal() {}
  union {
    Server_GRPC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Server_GRPCDefaultTypeInternal _Server_GRPC_default_instance_;

inline constexpr Data_Redis::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        network_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        addr_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        read_timeout_{nullptr},
        write_timeout_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Data_Redis::Data_Redis(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Data_RedisDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Data_RedisDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Data_RedisDefaultTypeInternal() {}
  union {
    Data_Redis _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Data_RedisDefaultTypeInternal _Data_Redis_default_instance_;

inline constexpr Server::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        http_{nullptr},
        grpc_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Server::Server(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefaultTypeInternal _Server_default_instance_;

inline constexpr Data::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        database_{nullptr},
        redis_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Data::Data(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;

inline constexpr Bootstrap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        server_{nullptr},
        data_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Bootstrap::Bootstrap(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BootstrapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BootstrapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BootstrapDefaultTypeInternal() {}
  union {
    Bootstrap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
}  // namespace api
}  // namespace kratos
static ::_pb::Metadata file_level_metadata_conf_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_conf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_conf_2eproto = nullptr;
const ::uint32_t
    TableStruct_conf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kratos::api::Bootstrap, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Bootstrap, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Bootstrap, _impl_.server_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Bootstrap, _impl_.data_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_HTTP, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_HTTP, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_HTTP, _impl_.network_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_HTTP, _impl_.addr_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_HTTP, _impl_.timeout_),
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_GRPC, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_GRPC, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_GRPC, _impl_.network_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_GRPC, _impl_.addr_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server_GRPC, _impl_.timeout_),
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server, _impl_.http_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Server, _impl_.grpc_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Database, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Database, _impl_.driver_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Database, _impl_.source_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _impl_.network_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _impl_.addr_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _impl_.read_timeout_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data_Redis, _impl_.write_timeout_),
        ~0u,
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data, _impl_.database_),
        PROTOBUF_FIELD_OFFSET(::kratos::api::Data, _impl_.redis_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kratos::api::Bootstrap)},
        {12, 23, -1, sizeof(::kratos::api::Server_HTTP)},
        {26, 37, -1, sizeof(::kratos::api::Server_GRPC)},
        {40, 50, -1, sizeof(::kratos::api::Server)},
        {52, -1, -1, sizeof(::kratos::api::Data_Database)},
        {62, 74, -1, sizeof(::kratos::api::Data_Redis)},
        {78, 88, -1, sizeof(::kratos::api::Data)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kratos::api::_Bootstrap_default_instance_._instance,
    &::kratos::api::_Server_HTTP_default_instance_._instance,
    &::kratos::api::_Server_GRPC_default_instance_._instance,
    &::kratos::api::_Server_default_instance_._instance,
    &::kratos::api::_Data_Database_default_instance_._instance,
    &::kratos::api::_Data_Redis_default_instance_._instance,
    &::kratos::api::_Data_default_instance_._instance,
};
const char descriptor_table_protodef_conf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nconf.proto\022\nkratos.api\032\036google/protobu"
    "f/duration.proto\"O\n\tBootstrap\022\"\n\006server\030"
    "\001 \001(\0132\022.kratos.api.Server\022\036\n\004data\030\002 \001(\0132"
    "\020.kratos.api.Data\"\374\001\n\006Server\022%\n\004http\030\001 \001"
    "(\0132\027.kratos.api.Server.HTTP\022%\n\004grpc\030\002 \001("
    "\0132\027.kratos.api.Server.GRPC\032Q\n\004HTTP\022\017\n\007ne"
    "twork\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\022*\n\007timeout\030\003 \001"
    "(\0132\031.google.protobuf.Duration\032Q\n\004GRPC\022\017\n"
    "\007network\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\022*\n\007timeout\030"
    "\003 \001(\0132\031.google.protobuf.Duration\"\222\002\n\004Dat"
    "a\022+\n\010database\030\001 \001(\0132\031.kratos.api.Data.Da"
    "tabase\022%\n\005redis\030\002 \001(\0132\026.kratos.api.Data."
    "Redis\032*\n\010Database\022\016\n\006driver\030\001 \001(\t\022\016\n\006sou"
    "rce\030\002 \001(\t\032\211\001\n\005Redis\022\017\n\007network\030\001 \001(\t\022\014\n\004"
    "addr\030\002 \001(\t\022/\n\014read_timeout\030\003 \001(\0132\031.googl"
    "e.protobuf.Duration\0220\n\rwrite_timeout\030\004 \001"
    "(\0132\031.google.protobuf.DurationB\'Z%dahua_s"
    "dk_ultimate/internal/conf;confb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_conf_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_conf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_conf_2eproto = {
    false,
    false,
    718,
    descriptor_table_protodef_conf_2eproto,
    "conf.proto",
    &descriptor_table_conf_2eproto_once,
    descriptor_table_conf_2eproto_deps,
    1,
    7,
    schemas,
    file_default_instances,
    TableStruct_conf_2eproto::offsets,
    file_level_metadata_conf_2eproto,
    file_level_enum_descriptors_conf_2eproto,
    file_level_service_descriptors_conf_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_conf_2eproto_getter() {
  return &descriptor_table_conf_2eproto;
}
namespace kratos {
namespace api {
// ===================================================================

class Bootstrap::_Internal {
 public:
  using HasBits = decltype(std::declval<Bootstrap>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_._has_bits_);
};

Bootstrap::Bootstrap(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Bootstrap)
}
inline PROTOBUF_NDEBUG_INLINE Bootstrap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Bootstrap::Bootstrap(
    ::google::protobuf::Arena* arena,
    const Bootstrap& from)
    : ::google::protobuf::Message(arena) {
  Bootstrap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.server_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Server>(
                              arena, *from._impl_.server_)
                        : nullptr;
  _impl_.data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Data>(
                              arena, *from._impl_.data_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Bootstrap)
}
inline PROTOBUF_NDEBUG_INLINE Bootstrap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Bootstrap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, server_),
           0,
           offsetof(Impl_, data_) -
               offsetof(Impl_, server_) +
               sizeof(Impl_::data_));
}
Bootstrap::~Bootstrap() {
  // @@protoc_insertion_point(destructor:kratos.api.Bootstrap)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Bootstrap::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.server_;
  delete _impl_.data_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Bootstrap::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_._cached_size_),
              false,
          },
          &Bootstrap::MergeImpl,
          &Bootstrap::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Bootstrap::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Bootstrap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.server_ != nullptr);
      _impl_.server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Bootstrap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Bootstrap::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Bootstrap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Bootstrap>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kratos.api.Data data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.data_)}},
    // .kratos.api.Server server = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.server_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kratos.api.Server server = 1;
    {PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.server_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kratos.api.Data data = 2;
    {PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.data_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kratos::api::Server>()},
    {::_pbi::TcParser::GetTable<::kratos::api::Data>()},
  }}, {{
  }},
};

::uint8_t* Bootstrap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Bootstrap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .kratos.api.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.server_, _impl_.server_->GetCachedSize(), target, stream);
  }

  // .kratos.api.Data data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.data_, _impl_.data_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Bootstrap)
  return target;
}

::size_t Bootstrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Bootstrap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .kratos.api.Server server = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.server_);
    }

    // .kratos.api.Data data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Bootstrap::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bootstrap*>(&to_msg);
  auto& from = static_cast<const Bootstrap&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Bootstrap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.server_ != nullptr);
      if (_this->_impl_.server_ == nullptr) {
        _this->_impl_.server_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Server>(arena, *from._impl_.server_);
      } else {
        _this->_impl_.server_->MergeFrom(*from._impl_.server_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.data_ != nullptr);
      if (_this->_impl_.data_ == nullptr) {
        _this->_impl_.data_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Data>(arena, *from._impl_.data_);
      } else {
        _this->_impl_.data_->MergeFrom(*from._impl_.data_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Bootstrap::IsInitialized() const {
  return true;
}

void Bootstrap::InternalSwap(Bootstrap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.data_)
      + sizeof(Bootstrap::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.server_)>(
          reinterpret_cast<char*>(&_impl_.server_),
          reinterpret_cast<char*>(&other->_impl_.server_));
}

::google::protobuf::Metadata Bootstrap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[0]);
}
// ===================================================================

class Server_HTTP::_Internal {
 public:
  using HasBits = decltype(std::declval<Server_HTTP>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_._has_bits_);
};

void Server_HTTP::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timeout_ != nullptr) _impl_.timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Server_HTTP::Server_HTTP(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Server.HTTP)
}
inline PROTOBUF_NDEBUG_INLINE Server_HTTP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        network_(arena, from.network_),
        addr_(arena, from.addr_) {}

Server_HTTP::Server_HTTP(
    ::google::protobuf::Arena* arena,
    const Server_HTTP& from)
    : ::google::protobuf::Message(arena) {
  Server_HTTP* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timeout_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.timeout_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Server.HTTP)
}
inline PROTOBUF_NDEBUG_INLINE Server_HTTP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        network_(arena),
        addr_(arena) {}

inline void Server_HTTP::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timeout_ = {};
}
Server_HTTP::~Server_HTTP() {
  // @@protoc_insertion_point(destructor:kratos.api.Server.HTTP)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Server_HTTP::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.network_.Destroy();
  _impl_.addr_.Destroy();
  delete _impl_.timeout_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Server_HTTP::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_._cached_size_),
              false,
          },
          &Server_HTTP::MergeImpl,
          &Server_HTTP::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Server_HTTP::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Server.HTTP)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timeout_ != nullptr);
    _impl_.timeout_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Server_HTTP::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 42, 2> Server_HTTP::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Server_HTTP_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Server_HTTP>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string network = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.network_)}},
    // string addr = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.addr_)}},
    // .google.protobuf.Duration timeout = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.timeout_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string network = 1;
    {PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.network_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string addr = 2;
    {PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.addr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration timeout = 3;
    {PROTOBUF_FIELD_OFFSET(Server_HTTP, _impl_.timeout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\26\7\4\0\0\0\0\0"
    "kratos.api.Server.HTTP"
    "network"
    "addr"
  }},
};

::uint8_t* Server_HTTP::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Server.HTTP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    const std::string& _s = this->_internal_network();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Server.HTTP.network");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    const std::string& _s = this->_internal_addr();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Server.HTTP.addr");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration timeout = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.timeout_, _impl_.timeout_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Server.HTTP)
  return target;
}

::size_t Server_HTTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Server.HTTP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_network());
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_addr());
  }

  // .google.protobuf.Duration timeout = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Server_HTTP::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Server_HTTP*>(&to_msg);
  auto& from = static_cast<const Server_HTTP&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Server.HTTP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timeout_ != nullptr);
    if (_this->_impl_.timeout_ == nullptr) {
      _this->_impl_.timeout_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.timeout_);
    } else {
      _this->_impl_.timeout_->MergeFrom(*from._impl_.timeout_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Server_HTTP::CopyFrom(const Server_HTTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Server.HTTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Server_HTTP::IsInitialized() const {
  return true;
}

void Server_HTTP::InternalSwap(Server_HTTP* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_, &other->_impl_.network_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.addr_, &other->_impl_.addr_, arena);
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::google::protobuf::Metadata Server_HTTP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[1]);
}
// ===================================================================

class Server_GRPC::_Internal {
 public:
  using HasBits = decltype(std::declval<Server_GRPC>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_._has_bits_);
};

void Server_GRPC::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timeout_ != nullptr) _impl_.timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Server_GRPC::Server_GRPC(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Server.GRPC)
}
inline PROTOBUF_NDEBUG_INLINE Server_GRPC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        network_(arena, from.network_),
        addr_(arena, from.addr_) {}

Server_GRPC::Server_GRPC(
    ::google::protobuf::Arena* arena,
    const Server_GRPC& from)
    : ::google::protobuf::Message(arena) {
  Server_GRPC* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timeout_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.timeout_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Server.GRPC)
}
inline PROTOBUF_NDEBUG_INLINE Server_GRPC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        network_(arena),
        addr_(arena) {}

inline void Server_GRPC::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timeout_ = {};
}
Server_GRPC::~Server_GRPC() {
  // @@protoc_insertion_point(destructor:kratos.api.Server.GRPC)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Server_GRPC::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.network_.Destroy();
  _impl_.addr_.Destroy();
  delete _impl_.timeout_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Server_GRPC::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_._cached_size_),
              false,
          },
          &Server_GRPC::MergeImpl,
          &Server_GRPC::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Server_GRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Server.GRPC)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timeout_ != nullptr);
    _impl_.timeout_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Server_GRPC::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 42, 2> Server_GRPC::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Server_GRPC_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Server_GRPC>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string network = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.network_)}},
    // string addr = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.addr_)}},
    // .google.protobuf.Duration timeout = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.timeout_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string network = 1;
    {PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.network_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string addr = 2;
    {PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.addr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration timeout = 3;
    {PROTOBUF_FIELD_OFFSET(Server_GRPC, _impl_.timeout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\26\7\4\0\0\0\0\0"
    "kratos.api.Server.GRPC"
    "network"
    "addr"
  }},
};

::uint8_t* Server_GRPC::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Server.GRPC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    const std::string& _s = this->_internal_network();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Server.GRPC.network");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    const std::string& _s = this->_internal_addr();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Server.GRPC.addr");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration timeout = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.timeout_, _impl_.timeout_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Server.GRPC)
  return target;
}

::size_t Server_GRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Server.GRPC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_network());
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_addr());
  }

  // .google.protobuf.Duration timeout = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Server_GRPC::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Server_GRPC*>(&to_msg);
  auto& from = static_cast<const Server_GRPC&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Server.GRPC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timeout_ != nullptr);
    if (_this->_impl_.timeout_ == nullptr) {
      _this->_impl_.timeout_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.timeout_);
    } else {
      _this->_impl_.timeout_->MergeFrom(*from._impl_.timeout_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Server_GRPC::CopyFrom(const Server_GRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Server.GRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Server_GRPC::IsInitialized() const {
  return true;
}

void Server_GRPC::InternalSwap(Server_GRPC* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_, &other->_impl_.network_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.addr_, &other->_impl_.addr_, arena);
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::google::protobuf::Metadata Server_GRPC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[2]);
}
// ===================================================================

class Server::_Internal {
 public:
  using HasBits = decltype(std::declval<Server>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Server, _impl_._has_bits_);
};

Server::Server(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Server)
}
inline PROTOBUF_NDEBUG_INLINE Server::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Server::Server(
    ::google::protobuf::Arena* arena,
    const Server& from)
    : ::google::protobuf::Message(arena) {
  Server* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.http_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Server_HTTP>(
                              arena, *from._impl_.http_)
                        : nullptr;
  _impl_.grpc_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Server_GRPC>(
                              arena, *from._impl_.grpc_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Server)
}
inline PROTOBUF_NDEBUG_INLINE Server::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Server::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, http_),
           0,
           offsetof(Impl_, grpc_) -
               offsetof(Impl_, http_) +
               sizeof(Impl_::grpc_));
}
Server::~Server() {
  // @@protoc_insertion_point(destructor:kratos.api.Server)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Server::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.http_;
  delete _impl_.grpc_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Server::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Server, _impl_._cached_size_),
              false,
          },
          &Server::MergeImpl,
          &Server::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Server)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.http_ != nullptr);
      _impl_.http_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.grpc_ != nullptr);
      _impl_.grpc_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Server::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Server::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Server, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Server_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Server>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kratos.api.Server.GRPC grpc = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Server, _impl_.grpc_)}},
    // .kratos.api.Server.HTTP http = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Server, _impl_.http_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kratos.api.Server.HTTP http = 1;
    {PROTOBUF_FIELD_OFFSET(Server, _impl_.http_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kratos.api.Server.GRPC grpc = 2;
    {PROTOBUF_FIELD_OFFSET(Server, _impl_.grpc_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kratos::api::Server_HTTP>()},
    {::_pbi::TcParser::GetTable<::kratos::api::Server_GRPC>()},
  }}, {{
  }},
};

::uint8_t* Server::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Server)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .kratos.api.Server.HTTP http = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.http_, _impl_.http_->GetCachedSize(), target, stream);
  }

  // .kratos.api.Server.GRPC grpc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.grpc_, _impl_.grpc_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Server)
  return target;
}

::size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Server)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .kratos.api.Server.HTTP http = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.http_);
    }

    // .kratos.api.Server.GRPC grpc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.grpc_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Server::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Server*>(&to_msg);
  auto& from = static_cast<const Server&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Server)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.http_ != nullptr);
      if (_this->_impl_.http_ == nullptr) {
        _this->_impl_.http_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Server_HTTP>(arena, *from._impl_.http_);
      } else {
        _this->_impl_.http_->MergeFrom(*from._impl_.http_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.grpc_ != nullptr);
      if (_this->_impl_.grpc_ == nullptr) {
        _this->_impl_.grpc_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Server_GRPC>(arena, *from._impl_.grpc_);
      } else {
        _this->_impl_.grpc_->MergeFrom(*from._impl_.grpc_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Server, _impl_.grpc_)
      + sizeof(Server::_impl_.grpc_)
      - PROTOBUF_FIELD_OFFSET(Server, _impl_.http_)>(
          reinterpret_cast<char*>(&_impl_.http_),
          reinterpret_cast<char*>(&other->_impl_.http_));
}

::google::protobuf::Metadata Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[3]);
}
// ===================================================================

class Data_Database::_Internal {
 public:
};

Data_Database::Data_Database(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Data.Database)
}
inline PROTOBUF_NDEBUG_INLINE Data_Database::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : driver_(arena, from.driver_),
        source_(arena, from.source_),
        _cached_size_{0} {}

Data_Database::Data_Database(
    ::google::protobuf::Arena* arena,
    const Data_Database& from)
    : ::google::protobuf::Message(arena) {
  Data_Database* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:kratos.api.Data.Database)
}
inline PROTOBUF_NDEBUG_INLINE Data_Database::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : driver_(arena),
        source_(arena),
        _cached_size_{0} {}

inline void Data_Database::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Data_Database::~Data_Database() {
  // @@protoc_insertion_point(destructor:kratos.api.Data.Database)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Data_Database::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.driver_.Destroy();
  _impl_.source_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Data_Database::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Data_Database, _impl_._cached_size_),
              false,
          },
          &Data_Database::MergeImpl,
          &Data_Database::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Data_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Data.Database)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.driver_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Data_Database::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> Data_Database::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Data_Database_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Data_Database>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string source = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Data_Database, _impl_.source_)}},
    // string driver = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Data_Database, _impl_.driver_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string driver = 1;
    {PROTOBUF_FIELD_OFFSET(Data_Database, _impl_.driver_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string source = 2;
    {PROTOBUF_FIELD_OFFSET(Data_Database, _impl_.source_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\6\6\0\0\0\0\0"
    "kratos.api.Data.Database"
    "driver"
    "source"
  }},
};

::uint8_t* Data_Database::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Data.Database)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string driver = 1;
  if (!this->_internal_driver().empty()) {
    const std::string& _s = this->_internal_driver();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Data.Database.driver");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    const std::string& _s = this->_internal_source();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Data.Database.source");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Data.Database)
  return target;
}

::size_t Data_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Data.Database)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string driver = 1;
  if (!this->_internal_driver().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_driver());
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Data_Database::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Data_Database*>(&to_msg);
  auto& from = static_cast<const Data_Database&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Data.Database)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_driver().empty()) {
    _this->_internal_set_driver(from._internal_driver());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data_Database::CopyFrom(const Data_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Data.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Data_Database::IsInitialized() const {
  return true;
}

void Data_Database::InternalSwap(Data_Database* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.driver_, &other->_impl_.driver_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_, &other->_impl_.source_, arena);
}

::google::protobuf::Metadata Data_Database::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[4]);
}
// ===================================================================

class Data_Redis::_Internal {
 public:
  using HasBits = decltype(std::declval<Data_Redis>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_._has_bits_);
};

void Data_Redis::clear_read_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.read_timeout_ != nullptr) _impl_.read_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Data_Redis::clear_write_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.write_timeout_ != nullptr) _impl_.write_timeout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Data_Redis::Data_Redis(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Data.Redis)
}
inline PROTOBUF_NDEBUG_INLINE Data_Redis::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        network_(arena, from.network_),
        addr_(arena, from.addr_) {}

Data_Redis::Data_Redis(
    ::google::protobuf::Arena* arena,
    const Data_Redis& from)
    : ::google::protobuf::Message(arena) {
  Data_Redis* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.read_timeout_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.read_timeout_)
                        : nullptr;
  _impl_.write_timeout_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(
                              arena, *from._impl_.write_timeout_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Data.Redis)
}
inline PROTOBUF_NDEBUG_INLINE Data_Redis::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        network_(arena),
        addr_(arena) {}

inline void Data_Redis::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, read_timeout_),
           0,
           offsetof(Impl_, write_timeout_) -
               offsetof(Impl_, read_timeout_) +
               sizeof(Impl_::write_timeout_));
}
Data_Redis::~Data_Redis() {
  // @@protoc_insertion_point(destructor:kratos.api.Data.Redis)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Data_Redis::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.network_.Destroy();
  _impl_.addr_.Destroy();
  delete _impl_.read_timeout_;
  delete _impl_.write_timeout_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Data_Redis::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_._cached_size_),
              false,
          },
          &Data_Redis::MergeImpl,
          &Data_Redis::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Data_Redis::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Data.Redis)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.read_timeout_ != nullptr);
      _impl_.read_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.write_timeout_ != nullptr);
      _impl_.write_timeout_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Data_Redis::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 41, 2> Data_Redis::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Data_Redis_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Data_Redis>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Duration write_timeout = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.write_timeout_)}},
    // string network = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.network_)}},
    // string addr = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.addr_)}},
    // .google.protobuf.Duration read_timeout = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.read_timeout_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string network = 1;
    {PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.network_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string addr = 2;
    {PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.addr_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration read_timeout = 3;
    {PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.read_timeout_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Duration write_timeout = 4;
    {PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.write_timeout_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\25\7\4\0\0\0\0\0"
    "kratos.api.Data.Redis"
    "network"
    "addr"
  }},
};

::uint8_t* Data_Redis::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Data.Redis)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    const std::string& _s = this->_internal_network();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Data.Redis.network");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    const std::string& _s = this->_internal_addr();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kratos.api.Data.Redis.addr");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration read_timeout = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.read_timeout_, _impl_.read_timeout_->GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration write_timeout = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.write_timeout_, _impl_.write_timeout_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Data.Redis)
  return target;
}

::size_t Data_Redis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Data.Redis)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1;
  if (!this->_internal_network().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_network());
  }

  // string addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_addr());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Duration read_timeout = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.read_timeout_);
    }

    // .google.protobuf.Duration write_timeout = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.write_timeout_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Data_Redis::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Data_Redis*>(&to_msg);
  auto& from = static_cast<const Data_Redis&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Data.Redis)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.read_timeout_ != nullptr);
      if (_this->_impl_.read_timeout_ == nullptr) {
        _this->_impl_.read_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.read_timeout_);
      } else {
        _this->_impl_.read_timeout_->MergeFrom(*from._impl_.read_timeout_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.write_timeout_ != nullptr);
      if (_this->_impl_.write_timeout_ == nullptr) {
        _this->_impl_.write_timeout_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Duration>(arena, *from._impl_.write_timeout_);
      } else {
        _this->_impl_.write_timeout_->MergeFrom(*from._impl_.write_timeout_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data_Redis::CopyFrom(const Data_Redis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Data.Redis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Data_Redis::IsInitialized() const {
  return true;
}

void Data_Redis::InternalSwap(Data_Redis* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_, &other->_impl_.network_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.addr_, &other->_impl_.addr_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.write_timeout_)
      + sizeof(Data_Redis::_impl_.write_timeout_)
      - PROTOBUF_FIELD_OFFSET(Data_Redis, _impl_.read_timeout_)>(
          reinterpret_cast<char*>(&_impl_.read_timeout_),
          reinterpret_cast<char*>(&other->_impl_.read_timeout_));
}

::google::protobuf::Metadata Data_Redis::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[5]);
}
// ===================================================================

class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Data, _impl_._has_bits_);
};

Data::Data(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kratos.api.Data)
}
inline PROTOBUF_NDEBUG_INLINE Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Data::Data(
    ::google::protobuf::Arena* arena,
    const Data& from)
    : ::google::protobuf::Message(arena) {
  Data* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.database_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Data_Database>(
                              arena, *from._impl_.database_)
                        : nullptr;
  _impl_.redis_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kratos::api::Data_Redis>(
                              arena, *from._impl_.redis_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kratos.api.Data)
}
inline PROTOBUF_NDEBUG_INLINE Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Data::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, database_),
           0,
           offsetof(Impl_, redis_) -
               offsetof(Impl_, database_) +
               sizeof(Impl_::redis_));
}
Data::~Data() {
  // @@protoc_insertion_point(destructor:kratos.api.Data)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Data::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.database_;
  delete _impl_.redis_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Data::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Data, _impl_._cached_size_),
              false,
          },
          &Data::MergeImpl,
          &Data::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:kratos.api.Data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.database_ != nullptr);
      _impl_.database_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.redis_ != nullptr);
      _impl_.redis_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Data::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Data::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Data, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Data_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kratos::api::Data>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kratos.api.Data.Redis redis = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Data, _impl_.redis_)}},
    // .kratos.api.Data.Database database = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Data, _impl_.database_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kratos.api.Data.Database database = 1;
    {PROTOBUF_FIELD_OFFSET(Data, _impl_.database_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kratos.api.Data.Redis redis = 2;
    {PROTOBUF_FIELD_OFFSET(Data, _impl_.redis_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kratos::api::Data_Database>()},
    {::_pbi::TcParser::GetTable<::kratos::api::Data_Redis>()},
  }}, {{
  }},
};

::uint8_t* Data::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kratos.api.Data)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .kratos.api.Data.Database database = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.database_, _impl_.database_->GetCachedSize(), target, stream);
  }

  // .kratos.api.Data.Redis redis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.redis_, _impl_.redis_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kratos.api.Data)
  return target;
}

::size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kratos.api.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .kratos.api.Data.Database database = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.database_);
    }

    // .kratos.api.Data.Redis redis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.redis_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Data::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kratos.api.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.database_ != nullptr);
      if (_this->_impl_.database_ == nullptr) {
        _this->_impl_.database_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Data_Database>(arena, *from._impl_.database_);
      } else {
        _this->_impl_.database_->MergeFrom(*from._impl_.database_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.redis_ != nullptr);
      if (_this->_impl_.redis_ == nullptr) {
        _this->_impl_.redis_ =
            ::google::protobuf::Message::CopyConstruct<::kratos::api::Data_Redis>(arena, *from._impl_.redis_);
      } else {
        _this->_impl_.redis_->MergeFrom(*from._impl_.redis_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kratos.api.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, _impl_.redis_)
      + sizeof(Data::_impl_.redis_)
      - PROTOBUF_FIELD_OFFSET(Data, _impl_.database_)>(
          reinterpret_cast<char*>(&_impl_.database_),
          reinterpret_cast<char*>(&other->_impl_.database_));
}

::google::protobuf::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_conf_2eproto_getter,
                                   &descriptor_table_conf_2eproto_once,
                                   file_level_metadata_conf_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace kratos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_conf_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
